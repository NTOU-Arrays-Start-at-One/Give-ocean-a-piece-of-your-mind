# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UAC_colorchart.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import cv2
import numpy as np
import os

class ImageLabel(QtWidgets.QLabel):
    '''獲取用户裁切座標點，畫線
        Attributes:
            points:用户點擊的裁切點
        '''

    def __init__(self, parent=None):
        super(ImageLabel, self).__init__(parent)
        self.points = []

    # normal function
    def show_image(self, image):
        # 参數image為np.array類型
        rgb_image = cv2.cvtColor(image.copy(), cv2.COLOR_BGR2RGB)
        rgb_image = cv2.resize(rgb_image, (self.width(), self.height()))
        label_image = QtGui.QImage(rgb_image.data, rgb_image.shape[1], rgb_image.shape[0], QtGui.QImage.Format_RGB888)
        self.setPixmap(QtGui.QPixmap(label_image))
    def return_points(self, img, return_flag):
        if return_flag:
            if len(self.points) < 4:
                return False
            else:
                ori_points = self.mapfromLoal(img, self.points)
                return ori_points

    def reselect(self):
        self.points.clear()
        self.update()

    # def get_points(self):
    #     return self.points

    def order_points(self, pts):
        sort_x = pts[np.argsort(pts[:, 0]), :]

        Left = sort_x[:2, :]
        Right = sort_x[2:, :]
        # Left sort
        Left = Left[np.argsort(Left[:, 1])[::-1], :]
        # Right sort
        Right = Right[np.argsort(Right[:, 1]), :]

        res = np.concatenate((Left, Right), axis=0)
        res = res.tolist()
        return res
    # slot function
    # 根據點過的點來畫圖
    def paintEvent(self, event):
        QtWidgets.QLabel.paintEvent(self, event)
        painter = QtGui.QPainter()
        painter.begin(self)

        pen = QtGui.QPen(QtCore.Qt.red, 3, QtCore.Qt.DashDotLine)  # 虛線畫筆
        painter.setPen(pen)

        for k in range(len(self.points)):
            painter.drawPoint(self.points[k][0], self.points[k][1])


        if len(self.points) == 4:
            points_ = self.order_points(np.array(self.points))
            #print(points_)
            for k in range(len(points_)):
                if k + 1 != len(points_):
                    painter.drawLine(points_[k][0], points_[k][1], points_[k + 1][0], points_[k + 1][1])
                else:
                    painter.drawLine(points_[k][0], points_[k][1], points_[0][0], points_[0][1])
        painter.end()

    # 開啟標記功能時，獲取滑鼠點擊的點
    def mouseReleaseEvent(self, event):
        if len(self.points) < 4:
            global_point = event.globalPos()
            local_point = self.mapFromGlobal(global_point)

            point_x = local_point.x()
            point_y = local_point.y()
            self.points.append([point_x, point_y])

            self.update()  # 獲取滑鼠點擊的點後，更新圖片

    def mapfromLoal(self, img, points):     # 將標記點的座標轉換為原圖的座標
        points_origanal = []
        #print(points)
        #print(img.shape[0], img.shape[1])
        y_ratio = np.float32(img.shape[0] / self.height())
        x_ratio = np.float32(img.shape[1] / self.width())
        for point in points:
            points_origanal.append([int(point[0] * x_ratio), int(point[1] * y_ratio)])

        return points_origanal


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 800)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_1.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.label_1.setGeometry(QtCore.QRect(20, 20, 800, 16))
        self.label_1.setObjectName("label_1")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.label_2.setGeometry(QtCore.QRect(700, 20, 500, 36))
        self.label_2.setObjectName("label_2")
        bias_0 = 120
        self.PB_4points = QtWidgets.QPushButton(self.centralwidget)
        self.PB_4points.setGeometry(QtCore.QRect(bias_0 + 110, 540, 60, 23))
        self.PB_4points.setObjectName("PB_4points")
        self.PB_reset = QtWidgets.QPushButton(self.centralwidget)
        self.PB_reset.setGeometry(QtCore.QRect(bias_0 + 260, 540, 65, 23))
        self.PB_reset.setObjectName("PB_reset")


        self.PB_rot = QtWidgets.QPushButton(self.centralwidget)
        self.PB_rot.setGeometry(QtCore.QRect(900, 540, 90, 23))
        self.PB_rot.setObjectName("PB_rot")

        bias_width = 25
        self.label_C = QtWidgets.QLabel(self.centralwidget)
        self.label_C.setGeometry(QtCore.QRect(bias_width + 200, 660, 191, 16))
        self.label_C.setObjectName("label_C")
        self.label_E = QtWidgets.QLabel(self.centralwidget)
        self.label_E.setGeometry(QtCore.QRect(bias_width + 200, 700, 191, 16))
        self.label_E.setObjectName("label_E")
        self.label_scale = QtWidgets.QLabel(self.centralwidget)
        self.label_scale.setGeometry(QtCore.QRect(bias_width + 5, 660, 65, 20))
        self.label_scale.setObjectName("label_scale")
        self.scale_text = QtWidgets.QLineEdit(self.centralwidget)
        self.scale_text.setGeometry(QtCore.QRect(bias_width + 75, 660, 40, 20))
        self.scale_text.setObjectName("scale_text")
        self.PB_ok = QtWidgets.QPushButton(self.centralwidget)
        self.PB_ok.setGeometry(QtCore.QRect(bias_width + 115, 660, 61, 20))
        self.PB_ok.setObjectName("PB_ok")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 610, 500, 16))
        self.label_3.setObjectName("label_3")
        self.PB_ok_2 = QtWidgets.QPushButton(self.centralwidget)
        self.PB_ok_2.setGeometry(QtCore.QRect(bias_width + 505, 750, 140, 23))
        self.PB_ok_2.setObjectName("PB_ok_2")

        #self.cc_image = QtWidgets.QLabel(self.centralwidget)
        self.cc_image = ImageLabel(self.centralwidget)
        self.cc_image.setGeometry(QtCore.QRect(10, 50, 640, 480))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cc_image.sizePolicy().hasHeightForWidth())
        self.cc_image.setSizePolicy(sizePolicy)
        self.cc_image.setText("")
        self.cc_image.setObjectName("cc_image")
        self.area_image = QtWidgets.QLabel(self.centralwidget)
        self.area_image.setGeometry(QtCore.QRect(700, 120, 480, 320))
        self.area_image.setObjectName("area_image")

        self.label_std = QtWidgets.QLabel(self.centralwidget)
        self.label_std.setGeometry(QtCore.QRect(700, 610, 150, 20))
        self.label_std.setObjectName("label_std")
        self.std_cc_image = QtWidgets.QLabel(self.centralwidget)
        self.std_cc_image.setGeometry(QtCore.QRect(850, 580, 300, 200))
        self.std_cc_image.setObjectName("area_image")

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Color Chart Difference by UAC"))
        self.label_1.setFont(QtGui.QFont("Roman times", 12, QtGui.QFont.Bold))
        self.label_1.setText(_translate("MainWindow", "step1: Choose image; "
                                                    "Select the color chart area by clicking four points on the image."))
        self.label_2.setFont(QtGui.QFont("Roman times", 12, QtGui.QFont.Bold))
        self.label_2.setText(_translate("MainWindow", "step2: Crop the color chart area (rotate the image if "
                                                    "necessary to \nmatch the standard color chart)."))
        self.PB_4points.setText(_translate("MainWindow", "confirm"))
        self.PB_reset.setText(_translate("MainWindow", "reset"))
        self.scale_text.setText(_translate("MainWindow", "0.5"))
        self.PB_rot.setText(_translate("MainWindow", "Rotate 90°"))
        self.PB_ok.setText(_translate("MainWindow", "ok"))
        self.PB_ok_2.setText(_translate("MainWindow", "Calculate and return points"))
        self.label_E.setText(_translate("MainWindow", "mean E: "))
        self.label_3.setFont(QtGui.QFont("Roman times", 12, QtGui.QFont.Bold))
        self.label_3.setText(_translate("MainWindow", "step3: Calculate the difference "
                                                    "(adjust the block scale if necessary)."))
        self.label_C.setText(_translate("MainWindow", "mean C: "))
        self.label_scale.setText(_translate("MainWindow", "block scale"))
        self.label_std.setFont(QtGui.QFont("Roman times", 12, QtGui.QFont.Bold))
        self.label_std.setText(_translate("MainWindow", "standard color chart"))
        try:
            cpath = os.path.abspath(__file__)
            ppath = os.path.dirname(cpath)
            std_cc_img = cv2.imread(os.path.join(ppath, 'Standard.png'))
            std_cc_img = cv2.resize(std_cc_img, (300, 200))
            std_cc_img = cv2.cvtColor(std_cc_img.copy(), cv2.COLOR_BGR2RGB)
            label_image = QtGui.QImage(std_cc_img.data, std_cc_img.shape[1], std_cc_img.shape[0], QtGui.QImage.Format_RGB888)
            self.std_cc_image.setPixmap(QtGui.QPixmap.fromImage(label_image))
        except:
            self.label_std.setText(_translate("MainWindow", "can't find standard color chart"))

